package be.bastien.DAO;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.swing.JOptionPane;

import be.bastien.metier.Personne;

public class DAOPersonne extends DAO<Personne> {
	public DAOPersonne(Connection conn){
		super(conn);
	}
	
	public boolean create(Personne personne) {
		Statement statement = null;
		ResultSet idGenere = null;
		try {
			if(!findPersonne(personne)){
				statement = connect.createStatement();
				statement.executeUpdate("INSERT INTO Personne(nom, prenom, age, login, pwd, email, localite)" + 
						"VALUES('"+ personne.getNom() + "','" + personne.getPrenom() + "','" + personne.getAge() + "','"
						+ personne.getLogin() + "','" + personne.getPwd() + "','" + personne.getEmail() + 
						"','" + personne.getLocalite() + "')");
				// Récupération de la clé générée après l'insertion
				idGenere = statement.getGeneratedKeys();
				// Définition de l'id dans la classe POJO
				if(idGenere.next())
					personne.setIdPersonne(idGenere.getInt(1));
				else
					System.out.println("Pas d'ID enregistré");
				statement.close();
				return true;
			}
			else{
				return false;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
		try{
			if(!findPersonne(personne)) {
				String strCreate = "INSERT INTO PERSONNE (NOM,PRENOM,LOGIN,PASSWORD) VALUES ('" + personne.getNom() + "',"
				+ "'" + personne.getPrenom() + "','" + personne.getLogin() + "','" + personne.getPassword() + "');";
				PreparedStatement s = this.connect.prepareStatement(strCreate);
				s.executeUpdate();
				if(s.getGeneratedKeys().next()) {
					personne.setIdPersonne(s.getGeneratedKeys().getInt(1));
				}
				else {
					JOptionPane.showMessageDialog(null, "Pas d'id enregistré");
				}
				return true;
			}
			else {
				return false;
			}
		}
		catch(SQLException e){
			e.printStackTrace();
			return false;
		}
	}
	
	public boolean delete(Personne personne) {
		return false;
	}
	
	public boolean update(Personne personne) {
		return false;
	}
	
	public Personne find(Personne personne) {	
		try{
			ResultSet result = this.connect.createStatement().executeQuery("SELECT * FROM PERSONNE");
			while(result.next()){
				if(result.getString("LOGIN").equals(personne.getLogin()) && result.getString("PASSWORD").equals(personne.getPassword())){
					personne.setIdPersonne(result.getInt("IdPersonne"));
					personne.setNom(result.getString("Nom"));
					personne.setPrenom("Prenom");
				}
			}
		}
		catch(SQLException e){
			e.printStackTrace();
		}
		
		return personne;
	}
	
	public boolean findPersonne(Personne personne){
		boolean trouve = false;
		
		try{
			ResultSet result = this.connect.createStatement().executeQuery("SELECT * FROM PERSONNE WHERE LOGIN = '" + personne.getLogin() + "' and PASSWORD = '" + personne.getPassword() + "'");
			if(result.next()){
				trouve = true;
			}
		}
		catch(SQLException e){
			e.printStackTrace();
			return false;
		}
		
		return trouve;
	}
}
